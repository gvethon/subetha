<?xml version="1.0"?>

<!--
	$Id$
	$URL$

	Build file for the junit regression tests.  Not an
	entry point; imported by the top-level buildfile.
-->

<project name="rtest" default="junit" basedir=".">

	<property name="build.rtest.classes.dir" location="${build.dir}/rtest-classes" />
	<property name="build.rtest.jar.file" location="${build.dir}/rtest.jar" />
	
	<dirname property="rtest.basedir" file="${ant.file.rtest}"/>
	<property name="rtest.javasrc.dir" location="${rtest.basedir}/src" />
	<property name="rtest.lib.dir" location="${rtest.basedir}/lib" />

	
	<path id="rtest.classpath">
		<fileset dir="${rtest.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		
		<pathelement location="${build.core.ejbclient.file}" />
		
		<path refid="master.classpath" />
	</path>

	<path id="rtest.run.classpath">
		<path refid="rtest.classpath" />

		<pathelement location="${build.rtest.jar.file}" />
		
		<fileset dir="${jboss.dir}">
			<!--
				Yes this is heavy-handed, but until JBoss stabilizes the
				jars required for acting as a client, it's the most robust
				solution.
			-->				
			<include name="client/jbossall-client.jar"/>
			<include name="server/default/deploy/**/*.jar"/>
			<include name="server/default/lib/**/*.jar"/>
		</fileset>
	</path>

 	<target name="rtest-classes" depends="core-ejbclient-jar">
		<mkdir dir="${build.rtest.classes.dir}" />
 		
		<javac srcdir="${rtest.javasrc.dir}"
				destdir="${build.rtest.classes.dir}"
				includeAntRuntime="false"
				debug="${build.debug}"
				deprecation="${build.deprecation}">
			
			<classpath refid="rtest.classpath" />
		</javac>
	</target>

	<!-- not necessary to do the jar packaging but why not -->
	<target name="rtest-jar" depends="rtest-classes">
		<jar jarfile="${build.rtest.jar.file}">
			<fileset dir="${build.rtest.classes.dir}"/>
			<fileset dir="${rtest.javasrc.dir}">
				<include name="**/*.msg"/>
			</fileset>
		</jar>
	</target>

	<target name="junit" depends="rtest-jar">
		<junit printsummary="yes">
			<classpath refid="rtest.run.classpath"/>
			
			<syspropertyset>
				<propertyref prefix="java.naming" />
			</syspropertyset>
			
			<formatter type="plain" />
			
			<batchtest todir="${build.dir}">
				<fileset dir="${build.rtest.classes.dir}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="junit-special" depends="rtest-jar">
		<junit printsummary="yes" fork="yes">
			<classpath refid="rtest.run.classpath"/>
			
			<syspropertyset>
				<propertyref prefix="java.naming" />
			</syspropertyset>
			
			<formatter type="plain" />
			
			<batchtest todir="${build.dir}">
				<fileset dir="${build.rtest.classes.dir}">
					<include name="${junit.special.tests}" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="junit-debug" depends="rtest-jar">
		<junit printsummary="yes" fork="yes">
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8001"/>
			<!-- <jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8001"/> -->

			<classpath refid="rtest.run.classpath"/>
			
			<syspropertyset>
				<propertyref prefix="java.naming" />
			</syspropertyset>
			
			<formatter type="plain" />
			
			<batchtest todir="${build.dir}">
				<fileset dir="${build.rtest.classes.dir}">
					<include name="${junit.special.tests}" />
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>

