<?xml version="1.0"?>

<!--
	$Id$
	$URL$

	Top-level build file for SubEtha  Imports build files for the
	various modules, so this is the only entry point.
	
	To run the junit tests, you must copy junit.jar into ANT_HOME/lib.
-->

<project name="subetha" default="war" basedir=".">

	<property name="name" value="${ant.project.name}" />
	
	<property file="user.properties" />
	<property file="${user.home}/build.properties" />
	<property file="build.properties" />

	<property name="build.debug" value="on" />
	<property name="build.deprecation" value="on" />

	<property name="ant.build.javac.target" value="1.5" />
	<property name="ant.build.javac.source" value="1.5" />

	<property name="build.dir" location="build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.war.file" location="${build.dir}/se.war" />
	<property name="build.client.file" location="${build.dir}/${name}-client.jar" />

	<property name="docs.dir" value="${build.dir}/docs" />

	<property name="resin.dir" location="/java/resin-4.0.0/" />
	<property name="deploy.dir" location="${resin.dir}/webapps" />
	<property name="expandedWar.dir" location="${deploy.dir}/se" />

	<property name="src.dir" location="src" />
	<property name="web.dir" location="web" />
	<property name="lib.dir" location="lib" />

	<tstamp/>
	<tstamp>
		<format property="YEAR" pattern="yyyy" />
	</tstamp>

	<path id="master.classpath">		
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>

		<fileset dir="${resin.dir}/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="javadoc.classpath">		
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
			<exclude name="build-only/**"/>
		</fileset>

		<fileset dir="${resin.dir}/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="rtest.build.classpath">
		<pathelement location="${build.classes.dir}" />
		<path refid="master.classpath" />
	</path>
	
	<path id="rtest.run.classpath">
		<pathelement location="${build.dir}/rtest/rtest.jar" />
		<pathelement location="${src.dir}"/>	<!-- gets the hessian serializers -->
		<path refid="rtest.build.classpath" />
	</path>
	
	<target name="init">
		<typedef resource="com/googlecode/svntask/svntask.xml">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/svnkit.jar"/>
					<include name="**/svntask.jar"/>
				</fileset>
			</classpath>
		</typedef>

		<svn><info path="${basedir}" revisionProperty="revisionVersion" /></svn>

		<!--  A hack because svnant does not respect Ant's properties can't be overwritten rule. -->
		<property name="version" value="${revisionVersion}" />
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>
	
 	<target name="classes" depends="init">
		<mkdir dir="${build.classes.dir}" />
 		
		<javac srcdir="${src.dir}"
				destdir="${build.classes.dir}"
				debug="${build.debug}"
				deprecation="${build.deprecation}"
			>
			<classpath refid="master.classpath" />
		</javac>
 		
		<taskdef name="propertize" classname="org.tagonist.propertize.PropertizeTask">
			<classpath>
				<path refid="master.classpath" />
			</classpath>
		</taskdef>		

		<propertize verbose="false">
			<fileset dir="${build.classes.dir}"/>
		</propertize>
	</target>
	
	<target name="client" depends="classes">
		<jar jarfile="${build.client.file}">
			<fileset dir="${build.classes.dir}">
				<include name="org/subethamail/common/**" />
				<include name="org/subethamail/**/i/**" />
			</fileset>
		</jar>
	</target>
	
	<target name="war" depends="classes">
		<war destfile="${build.war.file}" webxml="${web.dir}/WEB-INF/web.xml">
			<webinf dir="${web.dir}/WEB-INF">
				<exclude name="web.xml" />
			</webinf>
			
			<fileset dir="${web.dir}">
				<exclude name="WEB-INF/**" />
			</fileset>
			
			<classes dir="${build.classes.dir}" />
			
			<classes dir="${src.dir}">
				<include name="META-INF/**" />
				<include name="**/*.vm" />
			</classes>

			<lib dir="${lib.dir}">
				<exclude name="build-only/**"/>
			</lib>
		</war>
	</target>
	
	<target name="deploy" depends="war">
		<copy file="${build.war.file}" todir="${deploy.dir}" />
	</target>

	<target name="sync-deploy" depends="classes">
		<property name="timeDriftLimit" value="100"/>
		
		<sync todir="${expandedWar.dir}" granularity="${timeDriftLimit}" verbose="true" >
			<fileset dir="${web.dir}" />
			<preserveintarget>
				<!-- resin crap -->
				<include name="WEB-INF/tmp/**" />
				<include name="WEB-INF/work/**" />
				<!-- Taken care of below -->
				<include name="META-INF/**" />
				<include name="WEB-INF/classes/**" />
				<include name="WEB-INF/lib/**" />
			</preserveintarget>
		</sync>
		
		<sync todir="${expandedWar.dir}/WEB-INF/classes" granularity="${timeDriftLimit}" verbose="true">
			<fileset dir="${build.classes.dir}" />
			<fileset dir="${src.dir}">
				<exclude name="**/*.java"/>
			</fileset>
			<preserveintarget>
				<include name="META-INF/**" />
			</preserveintarget>
		</sync>
		
		<sync todir="${expandedWar.dir}/WEB-INF/classes/META-INF" granularity="${timeDriftLimit}" verbose="true">
			<fileset dir="${src.dir}/META-INF" />
		</sync>
		
		<sync todir="${expandedWar.dir}/WEB-INF/lib" verbose="true">
			<fileset dir="${lib.dir}" >
				<exclude name="**/build-only/**" />
			</fileset>
		</sync>
	</target>
	
	<target name="resin-deploy" depends="war">
	    <taskdef name="resin-deploy" classname="com.caucho.ant.ResinDeploy">
	        <classpath>
	              <fileset dir="lib">
	                  <include name="**"/>
	              </fileset>
                <fileset dir="${resin.dir}/lib/">
	          	  	<include name="**"/>
                </fileset>
	        </classpath>
	    </taskdef>
		
		<resin-deploy warfile="${build.war.file}" server="127.0.0.1" 
			 port="8080" user="admin" password="admin" 
			 virtualhost="default" version="0.1" commitmessage="trying"/>
	</target>
	
	<target name="precompile-jsp" description="precompile jsp">
        <taskdef name="resin-jspc" classname="com.caucho.ant.Jspc">
            <classpath>
                  <fileset dir="lib">
                      <include name="**"/>
                  </fileset>
                  <fileset dir="${resin.dir}/lib/">
            	  	<include name="**"/>
                  </fileset>
            </classpath>
        </taskdef>

        <resin-jspc rootDirectory="web"/>
	</target>

 	<target name="rtest-jar" depends="client">
		<mkdir dir="${build.dir}/rtest/classes" />
 		
		<javac
			srcdir="${basedir}/rtest/src"
			destdir="${build.dir}/rtest/classes"
			includeAntRuntime="false"
			debug="${build.debug}"
			deprecation="${build.deprecation}"
			target="${ant.build.javac.target}"
			source="${ant.build.javac.source}">

			<classpath refid="rtest.build.classpath" />
		</javac>
 		
		<jar jarfile="${build.dir}/rtest/rtest.jar">
			<fileset dir="${build.dir}/rtest/classes"/>
			<manifest>
				<attribute name="Specification-Version" value="${build.version}" />
				<attribute name="Implementation-Version" value="${TODAY}" />
			</manifest>
		</jar>
	</target>

	<target name="junit" depends="rtest-jar">
		<junit printsummary="yes" showoutput="yes" fork="yes" forkmode="once">
			<jvmarg value="-Djava.util.logging.config.file=rtest/logging.properties"/>
			<classpath refid="rtest.run.classpath"/>
			
			<syspropertyset>
				<propertyref prefix="java.naming" />
			</syspropertyset>
			
			<formatter type="plain" />
			
			<batchtest todir="${build.dir}">
				<fileset dir="${build.dir}/rtest/classes">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="junit-special" depends="rtest-jar">
		<junit printsummary="true" showoutput="true" fork="true" forkmode="once">
			<jvmarg value="-Djava.util.logging.config.file=rtest/logging.properties"/>
			
			<classpath refid="rtest.run.classpath"/>
			
			<syspropertyset>
				<propertyref prefix="java.naming" />
			</syspropertyset>
			
			<formatter type="plain" />
			
			<batchtest todir="${build.dir}">
				<fileset dir="${build.dir}/rtest/classes">
					<include name="${junit.special.tests}" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="junit-debug" depends="rtest-jar">
		<junit printsummary="yes" showoutput="yes" fork="yes" forkmode="once">
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=7891"/>
			<jvmarg value="-Djava.util.logging.config.file=rtest/logging.properties"/>
			
			<classpath refid="rtest.run.classpath"/>
			
			<syspropertyset>
				<propertyref prefix="java.naming" />
			</syspropertyset>
			
			<formatter type="plain" />
			
			<batchtest todir="${build.dir}">
				<fileset dir="${build.dir}/rtest/classes">
					<include name="${junit.special.tests}" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="build-docs" description="downloads docs from wiki and processes them into the build/docs dir">
		<property name="wiki.baseurl" value="http://code.google.com/p/subetha/wiki"/>
				
		<mkdir dir="${docs.dir}"/>
		
		<get dest="${docs.dir}/AdminGuide.html" src="${wiki.baseurl}/AdminGuide?show=content"/>
		<get dest="${docs.dir}/InstallGuide.html" src="${wiki.baseurl}/InstallGuide?show=content"/>
		<get dest="${docs.dir}/MtaGuide.html" src="${wiki.baseurl}/MtaGuide?show=content"/>
		<get dest="${docs.dir}/DeveloperGuide.html" src="${wiki.baseurl}/DeveloperGuide?show=content"/>
		<get dest="${docs.dir}/MailmanMigration.html" src="${wiki.baseurl}/MailmanMigration?show=content"/>
		<get dest="${docs.dir}/SubEtha.html" src="${wiki.baseurl}/SubEtha?show=content"/>		
		<get dest="${docs.dir}/FAQ.html" src="${wiki.baseurl}/FaQ?show=content"/>
		
		<!-- Write simple xsl to transform links and style things a little nicer. Should replace the replaces below...  -->
		<!--
		<xslt extension="*.html" style="${basedir}/wiki2html-cleanup.xsl" 
			basedir="${download.dir}" destdir="${docs.dir}" filenameparameter="filename">
			<param name="baseurl" expression="${wiki.baseurl}"/>
		</xslt>
		-->
		
		<!-- Replace links in files -->
		<replace dir="${docs.dir}" token="/p/subetha/wiki/AdminGuide" value="AdminGuide.html"/>
		<replace dir="${docs.dir}" token="/p/subetha/wiki/InstallGuide" value="InstallGuide.html"/>
		<replace dir="${docs.dir}" token="/p/subetha/wiki/MtaGuide" value="MtaGuide.html"/>
		<replace dir="${docs.dir}" token="/p/subetha/wiki/DeveloperGuide" value="DeveloperGuide.html"/>
		<replace dir="${docs.dir}" token="/p/subetha/wiki/MailmanMigration" value="MailmanMigration.html"/>
		<replace dir="${docs.dir}" token="/p/subetha/wiki/SubEtha" value="SubEtha.html"/>
		<replace dir="${docs.dir}" token="/p/subetha/wiki/FaQ" value="FAQ.html"/>
		
		<!-- link back to the wiki, if we haven't downloaded the content -->
		<replace dir="${docs.dir}" token="/p/subetha/wiki" value="${wiki.baseurl}"/>

		
	</target>

	<target name="javadoc" depends="init-dist, classes">
		<javadoc
			destdir="${build.dir}/javadoc"
			packagenames="*"
			classpathref="javadoc.classpath"
			author="true"
			version="true"
			Windowtitle="SubEtha Javadoc"
		>
			<fileset dir="${src.dir}"/>
			<doctitle><![CDATA[<h1>SubEtha</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; ${YEAR} SubEtha. All Rights Reserved. Build version: ${build.version}</i>]]></bottom>
		</javadoc>
	</target>
	
	<target name="init-dist">
		<input addproperty="build.version" message="Version number?" />
		<property name="dist.name" value="SubEtha-${build.version}" />

		<property name="build.dist.dir" location="${build.dir}/${name}-${build.version}"/>
		<property name="build.dist.zip" location="${build.dir}/${dist.name}.zip"/>
	</target>

	<target name="dist" depends="clean, init-dist, war, build-docs">
		<copy todir="${build.dist.dir}">
			<fileset dir="${build.dir}">
				<include name="*.war" />
			</fileset>
			
			<fileset dir="${build.dir}">
				<include name="javadoc/**" />
				<include name="docs/**" />
				
			</fileset>

			<fileset dir=".">
				<include name="README.html" />
				<include name="LICENSE.txt" />
				<include name="build.xml" />
				<include name="build.properties" />
				<include name=".project" />
				<include name=".classpath" />
				
				<include name="lib/**" />
				<include name="src/**" />
				<include name="rtest/**" />
				<include name="loadtest/**" />
				<include name="web/**" />

				<exclude name="**/.svn"/>
			</fileset>
		</copy>

		<dirname property="build.dist.dir.dirname" file="${build.dist.dir}" />
		<basename property="build.dist.dir.basename" file="${build.dist.dir}" />
		
		<zip zipfile="${build.dist.zip}" basedir="${build.dist.dir.dirname}">
			<include name="${build.dist.dir.basename}/**" />
		</zip>
	</target>

</project>