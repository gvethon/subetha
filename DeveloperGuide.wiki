#labels Featured
= Setup Instructions for Development =

<wiki:toc max_depth="3" />

Developer setup instructions are the same as described in the InstallGuide. Take special note of the instructions below if you wish to run the unit tests, or build.  For a quick description of SubEtha's architecture, see [http://blog.caucho.com/?p=209 this blog entry] written by Scott Ferguson (of Caucho).

== Eclipse Setup ==
The core developers use [http://eclipse.org/ Eclipse] as their IDE (some would say for lack of something better).

=== SVN Checkout ===
In order to setup Eclipse, you should first make sure to install the [http://subclipse.tigris.org/ Subclipse] plugin. Once you have installed that plugin. Select File->Import->Checkout projects from SVN. Select "Create a new repository location". Enter the URL for SubEtha's repository: {{{http://subetha.googlecode.com/svn/trunk}}}

=== Resin Classpath Variable ===
Once you have the project checked out you need to define the location of *SUBETHA_RESIN_HOME* in Eclipse. Select Project->Properties. Java Build Path->Add Variable. Configure Variables->New and set the name to *SUBETHA_RESIN_HOME* and the folder location where you installed RESIN. Now, Eclipse should properly find all the right libraries it needs.

=== Building ===
The next step is to build SubEtha. From the Java perspective, select Window->Show View->Ant. Right click in the Ant view and Add buildfiles. Then look for the top level SubEtha build file and add it. Once that is done, you can double click the 'deploy' target which will build SubEtha and install it in the right deployment directory location.

=== Suggested Eclipse Plugins ===
  
  *  [http://subclipse.tigris.org/ Subclipse]
  *  [http://eclipse-cs.sourceforge.net/ Check Style]

=== Linked Resources (Optional) ===

You can also setup Linked Resource support in eclipse so that you can edit the deployed files. These linked folders can also allow direct editing (in eclipse) for configuration files. To do this, please add a SUBETHA_RESIN_HOME variable to the workspace linked resources properties. These setting can be found at Window -> Preferences under the {{{General : Workspace : Linked Resources}}} section. Select New from the dialog and specify a name of RESIN_HOME to the home folder. The linked folders in the project are named "resin-X", where X points various places in the install directory.

*Note*: You will need to refresh the linked folders each time you deploy. Eclipse does not monitor changes on the filesystem it does not cause.

== Startup ==

  * Start up Resin. Hint: {{{ ./bin/resin.sh }}}
    The default web interface is http://localhost:8080/se/
 
 When SubEtha runs for the first time, it creates a site administrator account named  *root@localhost*, with the password  *password*. You can login with these credentials initially.

== Directory Layout ==

The subdirectories correspond to various components:
 
  * src - The main source tree for the application. Sub-sections are broken up as described below.
 
  * src/.../i/... - Public interface (API) layer which gets packaged into subetha-client.jar.  Can be called remotely.

  * src/.../common/... - Common utility classes, shared by all components.

  * src/.../core/... - The core business logic, implemented as a set of EJBs and "web beans".

  * src/.../plugin/... - Implementation of all the plugins distributed with SubEtha. Note that the plugin interfaces are part of core and built into the core api jar.

  * src/.../entity/... - The data model. Contains EJB3 entity beans and all queries.

  * rtest - All junit regression testing code and instructions. JUnit tests are remote clients to the core ejb interface.

  * loadtest - A simple load tester to create a bunch of emails for a test list. 

  * web - The front end web application, packaged as a war. Contains JSPs and all other content, acts as a client to the core layer.

== Testing ==

There are a number of tests that can run against subetha to verify the installation and to help with developement. All of these tests require that you run subetha while testing; we suggest not using it during tests as some site wide changes are made during the tests.

=== Running Regression Tests ===

How to run the JUnit regression tests from ant:
  * Make sure the code you want to test is deployed.  {{{ant deploy}}} will build the latest and deploy it.
  * SubEtha must be running its SMTP service on port 2500.
  * Make sure port 2525 and 2526 are free; the unit tests start mock SMTP servers on these ports.
 
  * Start Resin. The unit tests are run against the live container. 
  * Run  {{{ant junit}}}. All your regression tests will run.
  
  * If you want to run just one set of tests, edit the junit.special.tests property in your build.properties or better yet user.properties. Then run the  {{{ant junit-special}}} target.
 
  * If you want to run the special unit test(s) in the debugger, run the  {{{ant junit-debug}}} target. The JVM will pause and wait until you attach with Eclipse.

=== Running Load Tests ===
You can run a test to put a little stress on your server. It will send a continuous stream of messages, and then count the number of recipients whom receive them. It is a not a scientific load test, but shows that the system can handle many concurrent requests.

  # Start Resin (w deployment) See the InstallGuide if you need help.
  # Create a list to test with. The name of the list and other information is in {{{loadtest/build.xml}}}. Here is what is in the standard build file.
{{{
	<property name="from" value="root@localhost"/>
	<property name="to" value="load@localhost"/>
	<property name="attachmentFilePath" value="/tmp/attachment.dat"/>
}}}
  # Run the test. {{{ant genload}}}
  
=== Interactive Testing ===
It is easy to interactively test SubEtha by injecting email from your mail client directly into an instance of SubEtha. The way to do it is to setup a mail account in your client with a *From:* address of a subscriber on the list, the *To:* address is an existing list email. Make sure the *outgoing mail server* is the SubEtha server and that it is running on *port 2500*.

It is also very easy to connect to port 2500 and just talk to the mail server! In {{{rtest/testsmtpconv.txt}}} you will find a simple text file containing the client conversation which can be easy pasted into an open (telnet) connection.
{{{
	telnet localhost 2500
	<paste contents of file>
}}}