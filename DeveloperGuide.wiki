#labels Featured
= Setup Instructions for Development =

Developer setup instructions are the same as the regular InstallInstructions. Take special note of the instructions below if you wish to run the unit tests.

== Eclipse Setup ==
The core developers use [http://eclipse.org/ "Eclipse"] as their IDE (some would say for lack of something better). We suggest you do as well; to fit in if for now other reason. =)


In order to setup Eclipse, you should first make sure to install the [http://subclipse.tigris.org/ "Subclipse"] plugin. Once you have installed that plugin. Select File->Import->Checkout projects from SVN. Select "Create a new repository location". Enter the URL for SubEtha's repository: {{{http://subetha.googlecode.com/svn/trunk}}}

Once you have the project checked out you need to define the location of RESIN_HOME in Eclipse. Select Project->Properties. Java Build Path->Add Variable. Configure Variables->New and set the name to RESIN_HOME and the folder location where you installed RESIN. Now, Eclipse should properly find all the right libraries it needs.

The next step is to build SubEtha. From the Java perspective, select Window->Show View->Ant. Right click in the Ant view and Add buildfiles. Then look for the top level SubEtha build file and add it. Once that is done, you can double click the 'deploy' target which will build SubEtha and install it in the right deployment directory location.

== Suggested Eclipse Plugins ==
  
  *  *Check Style*: [http://eclipse-cs.sourceforge.net/ "http://eclipse-cs.sourceforge.net/"]
  *  *Subclipse*: [http://subclipse.tigris.org/ "http://subclipse.tigris.org/"]

== Linked Resources (Optional) ==

You can also setup Linked Resource support in eclipse so that you can edit the deployed files. These linked folders can also allow direct editing (in eclipse) for configuration files. To do this, please add a RESIN_HOME variable to the workspace linked resources properties. These setting can be found at Window -> Preferences under the {{{General : Workspace : Linked Resources}}} section. Select New from the dialog and specify a name of RESIN_HOME to the home folder. The linked folders in the project are named "resin-X", where X points various places in the install directory.

 *Note:* You will need to refresh the linked folders each time you deploy. Eclipse does not monitor changes on the filesystem it does not cause.

== Startup ==

  * Start up Resin. 
    The default web interface is http://localhost:8080/se/
 
 When SubEtha runs for the first time, it creates a site administrator account named  *root@localhost*, with the password  *password*.

 == Directory Layout ==

The subdirectories correspond to various components:
 
  * src - The main source tree for the application. Sub-sections are broken up as described below.
 
  * src/.../*i* - Interface (API) layer 

  * src/.../*common* - A common jar of utility classes, shared by all components. Includes some constants defined for the data model.

  * src/.../*core* - The core business logic, implemented as a set of session EJBs. There may also be some service EJBs here. There is also a special component built, a sar, which contains thirdparty jars and some configuration instructions to JBoss.

  * src/.../*plugin* - Implementation of all the plugins distributed with SubEtha. Note that the plugin interfaces are part of core and built into the core api jar.

  * src/.../*entity* - The data model. Contains EJB3 entity beans and a simple session EJB Data Access Object pattern. All queries are defined here as well.

  * rtest - All junit regression testing code and instructions. JUnit tests are remote clients to the core ejb interface.

  * web - The front end web application, packaged as a war. Contains JSPs and all other content, acts as a client to the core layer.

== Running Regression Tests ==

How to run the JUnit regression tests from ant:
  * Make sure the code you want to test is deployed.  {{{ant deploy}}} will build the latest and deploy it.
  * Make sure port 2500 and 2525 are free; the unit tests start a mock SMTP server on port 2525.
 
  * Start Resin. The unit tests are run against the live container. 
  * Run  {{{ant junit}}}. All your regression tests will run.
  
  * If you want to run just one set of tests, edit the junit.special.tests property in your build.properties or better yet user.properties. Then run the  {{{ant junit-special}}} target.
 
  * If you want to run the special unit test(s) in the debugger, run the  {{{ant junit-debug}}} target. The JVM will pause and wait until you attach with Eclipse.

== Developing Filters ==
  
We have written directiong for DevelopingFilters. Filters are the core processing methods for changing messages as they are received and sent to user. You can write your own filters for making modifications to the incoming and outgoing mail streams in SubEtha. If you write a useful filter and you want to contribute it we would love to hear about it on the developers mailing list.

== Interactive Testing ==
It is easy to interactively test SubEtha by injecting email from your mail client directly into an instance of SubEtha. The way to do it is to setup a mail account in your client with a *From:* address of a subscriber on the list, the *To:* address is an existing list email. Make sure the *outgoing mail server* is the SubEtha server and that it is running on *port 2500*.

It is also very easy to connect to port 2500 and just talk to the mail server! In {{{rtest/testsmtpconv.txt}}} you will find a simple text file containing the client conversation which can be easy pasted into an open (telnet) connection.
{{{
	telnet localhost 2500
	<past contents of file>
}}}